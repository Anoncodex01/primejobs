import { FC, useState } from 'react';
import { Link } from 'react-router-dom';
import {
  FileText,
  Save,
  Eye,
  Send,
  ArrowLeft,
  CheckCircle,
  AlertCircle,
  Clock,
  Building2,
  DollarSign,
  MapPin,
  Calendar,
  Users,
  Briefcase,
  Star,
  Plus,
  X,
  Upload
} from 'lucide-react';
import { JobRequirement } from '../../types/employer';

const CreateJob: FC = () => {
  const [activeTab, setActiveTab] = useState<'form' | 'preview' | 'submitted'>('form');
  const [jobRequirement, setJobRequirement] = useState<Partial<JobRequirement>>({
    position: '',
    jobDescription: '',
    jobRequirements: '',
    location: '',
    salaryRange: {
      min: 0,
      max: 0,
      currency: 'TZS'
    },
    viewToCandidates: false,
    testPaper: undefined
  });

  const [autoGeneratedAd, setAutoGeneratedAd] = useState<string>('');

  const handleInputChange = (field: keyof JobRequirement, value: any) => {
    setJobRequirement(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSalaryChange = (field: 'min' | 'max', value: number) => {
    setJobRequirement(prev => ({
      ...prev,
      salaryRange: {
        ...prev.salaryRange!,
        [field]: value
      }
    }));
  };

  const generateAdvertisement = () => {
    if (!jobRequirement.position || !jobRequirement.jobDescription || !jobRequirement.jobRequirements || !jobRequirement.location) {
      return;
    }

    const salaryText = jobRequirement.viewToCandidates 
      ? `**Salary Range:** ${jobRequirement.salaryRange?.currency} ${jobRequirement.salaryRange?.min.toLocaleString()} - ${jobRequirement.salaryRange?.max.toLocaleString()}`
      : `**Salary:** Competitive (details available upon application)`;

    const ad = `**${jobRequirement.position}**

**About the Role:**
${jobRequirement.jobDescription}

**Requirements:**
${jobRequirement.jobRequirements}

${salaryText}

**Location:** ${jobRequirement.location}

**Employment Type:** Full-time

We are seeking a talented and experienced ${jobRequirement.position} to join our dynamic team. This is an exciting opportunity to work with a leading organization and contribute to our continued success.

**What We Offer:**
- Competitive salary package
- Professional development opportunities
- Collaborative work environment
- Growth potential

If you meet the requirements and are interested in this position, please apply through our platform.`;

    setAutoGeneratedAd(ad);
  };

  const handleSubmit = async () => {
    setIsLoading(true);
    try {
      // Simulate API call to submit job requirement for admin review
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Store job requirement in localStorage for demo purposes
      const jobRequirementData = {
        ...jobRequirement,
        id: Date.now().toString(),
        employerId: 'current-employer',
        status: 'submitted',
        submittedAt: new Date(),
        employer: {
          id: 'current-employer',
          companyName: 'Current Company', // This would come from user data
          email: 'hr@company.com' // This would come from user data
        }
      };
      
      // In a real app, this would be sent to the backend
      localStorage.setItem('submittedJobRequirements', JSON.stringify([
        ...JSON.parse(localStorage.getItem('submittedJobRequirements') || '[]'),
        jobRequirementData
      ]));
      
      setActiveTab('submitted');
    } catch (error) {
      console.error('Error submitting job requirement:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handlePreview = () => {
    generateAdvertisement();
    setActiveTab('preview');
  };

  const handleBackToForm = () => {
    setActiveTab('form');
  };

  if (activeTab === 'submitted') {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="max-w-md w-full bg-white rounded-lg shadow-lg p-8 text-center">
          <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-900 mb-4">Job Requirement Submitted!</h2>
          <p className="text-gray-600 mb-6">
            Your job requirement has been successfully submitted for approval. Our team will review it and create an optimized job advertisement.
          </p>
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
            <p className="text-sm text-blue-800">
              <strong>Next Steps:</strong> You'll receive an email notification once your job advertisement is approved and published.
            </p>
          </div>
          <div className="space-y-3">
            <Link
              to="/employer/dashboard"
              className="w-full inline-flex items-center justify-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to Dashboard
            </Link>
            <Link
              to="/employer/job-postings"
              className="w-full inline-flex items-center justify-center px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
            >
              View Job Requirements
            </Link>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Link
                to="/employer/dashboard"
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <ArrowLeft className="w-6 h-6" />
              </Link>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">
                  {activeTab === 'form' ? 'Submit Job Requirement' : 'Preview Advertisement'}
                </h1>
                <p className="text-gray-600">
                  {activeTab === 'form' 
                    ? 'Provide detailed job requirements for our team to create an optimized advertisement'
                    : 'Review the auto-generated job advertisement before submission'
                  }
                </p>
              </div>
            </div>
            <div className="flex items-center space-x-3">
              {activeTab === 'preview' && (
                <button
                  onClick={handleBackToForm}
                  className="inline-flex items-center px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  <X className="w-4 h-4 mr-2" />
                  Edit
                </button>
              )}
              {activeTab === 'form' && (
                <button
                  onClick={handlePreview}
                  className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  <Eye className="w-4 h-4 mr-2" />
                  Preview Advertisement
                </button>
              )}
              {activeTab === 'preview' && (
                <button
                  onClick={handleSubmit}
                  className="inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                >
                  <Send className="w-4 h-4 mr-2" />
                  Submit for Approval
                </button>
              )}
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {activeTab === 'form' && (
          <div className="bg-white rounded-lg shadow-sm border border-gray-200">
            <div className="px-6 py-4 border-b border-gray-200">
              <h2 className="text-lg font-semibold text-gray-900">Job Requirements Form</h2>
              <p className="text-sm text-gray-600 mt-1">
                Fill in the details below. Our team will create an optimized job advertisement based on your requirements.
              </p>
            </div>
            
            <div className="p-6 space-y-6">
              {/* Position */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Position Title *
                </label>
                <input
                  type="text"
                  value={jobRequirement.position}
                  onChange={(e) => handleInputChange('position', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., Senior Software Engineer"
                />
              </div>

              {/* Job Description */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Job Description *
                </label>
                <textarea
                  value={jobRequirement.jobDescription}
                  onChange={(e) => handleInputChange('jobDescription', e.target.value)}
                  rows={4}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Describe the role, responsibilities, and what the candidate will be doing..."
                />
              </div>

              {/* Job Requirements */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Job Requirements *
                </label>
                <textarea
                  value={jobRequirement.jobRequirements}
                  onChange={(e) => handleInputChange('jobRequirements', e.target.value)}
                  rows={4}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="List the required skills, experience, qualifications, and competencies..."
                />
              </div>

              {/* Location */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Job Location *
                </label>
                <div className="relative">
                  <MapPin className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                  <input
                    type="text"
                    value={jobRequirement.location}
                    onChange={(e) => handleInputChange('location', e.target.value)}
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="e.g., Dar es Salaam, Tanzania"
                    required
                  />
                </div>
              </div>

              {/* Salary Range */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Salary Range *
                </label>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-xs text-gray-500 mb-1">Minimum *</label>
                    <input
                      type="number"
                      value={jobRequirement.salaryRange?.min || ''}
                      onChange={(e) => handleSalaryChange('min', parseInt(e.target.value) || 0)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      placeholder="0"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-xs text-gray-500 mb-1">Maximum *</label>
                    <input
                      type="number"
                      value={jobRequirement.salaryRange?.max || ''}
                      onChange={(e) => handleSalaryChange('max', parseInt(e.target.value) || 0)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      placeholder="0"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-xs text-gray-500 mb-1">Currency *</label>
                    <select
                      value={jobRequirement.salaryRange?.currency}
                      onChange={(e) => handleSalaryChange('currency', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      required
                    >
                      <option value="TZS">TZS</option>
                      <option value="USD">USD</option>
                      <option value="EUR">EUR</option>
                    </select>
                  </div>
                </div>
              </div>

              {/* View to Candidates */}
              <div>
                <div className="flex items-center gap-3">
                  <input
                    type="checkbox"
                    id="viewToCandidates"
                    checked={jobRequirement.viewToCandidates}
                    onChange={(e) => handleInputChange('viewToCandidates', e.target.checked)}
                    className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <label htmlFor="viewToCandidates" className="text-sm text-gray-700">
                    Show salary range to candidates (optional)
                  </label>
                </div>
                <p className="text-xs text-gray-500 mt-1 ml-7">
                  If unchecked, salary range will be hidden from candidates but visible to our team
                </p>
              </div>

              {/* Test Paper Upload */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Test Paper (Optional)
                </label>
                <div className="space-y-4">
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-500 transition-colors">
                    {jobRequirement.testPaper ? (
                      <div className="flex flex-col items-center gap-3">
                        <FileText className="w-8 h-8 text-blue-500" />
                        <div>
                          <p className="text-sm font-medium text-gray-900">{jobRequirement.testPaper.fileName}</p>
                          <p className="text-xs text-gray-500">Click to change</p>
                        </div>
                      </div>
                    ) : (
                      <div className="flex flex-col items-center gap-3">
                        <Upload className="w-8 h-8 text-gray-400" />
                        <div>
                          <p className="text-sm font-medium text-gray-900 mb-1">
                            Upload test paper for candidates
                          </p>
                          <p className="text-xs text-gray-500">PDF, DOC, DOCX files up to 10MB</p>
                        </div>
                      </div>
                    )}
                    <input
                      type="file"
                      accept=".pdf,.doc,.docx"
                      onChange={(e) => {
                        const file = e.target.files?.[0];
                        if (file) {
                          setJobRequirement(prev => ({
                            ...prev,
                            testPaper: {
                              file,
                              fileName: file.name,
                              hasAnswerSheet: false
                            }
                          }));
                        }
                      }}
                      className="hidden"
                      id="testPaper"
                    />
                    <label htmlFor="testPaper" className="cursor-pointer mt-3 inline-block">
                      <span className="text-blue-600 hover:text-blue-700 font-medium">
                        {jobRequirement.testPaper ? 'Change File' : 'Choose file'}
                      </span>
                    </label>
                  </div>

                  {jobRequirement.testPaper && (
                    <div className="flex items-center gap-3">
                      <input
                        type="checkbox"
                        id="hasAnswerSheet"
                        checked={jobRequirement.testPaper.hasAnswerSheet}
                        onChange={(e) => {
                          setJobRequirement(prev => ({
                            ...prev,
                            testPaper: prev.testPaper ? {
                              ...prev.testPaper,
                              hasAnswerSheet: e.target.checked
                            } : undefined
                          }));
                        }}
                        className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                      />
                      <label htmlFor="hasAnswerSheet" className="text-sm text-gray-700">
                        This test paper includes an answer sheet
                      </label>
                    </div>
                  )}
                </div>
                <p className="text-xs text-gray-500 mt-2">
                  We will administer this test to candidates before interviews and share scores with you
                </p>
              </div>

              {/* Additional Information */}
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <div className="flex items-start">
                  <AlertCircle className="w-5 h-5 text-blue-500 mr-3 mt-0.5" />
                  <div>
                    <h3 className="text-sm font-medium text-blue-800">Important Information</h3>
                    <ul className="mt-2 text-sm text-blue-700 space-y-1">
                      <li>• Your job requirement will be reviewed by our team</li>
                      <li>• We'll create an optimized advertisement for maximum visibility</li>
                      <li>• The advertisement will be posted on our platform and social media</li>
                      <li>• You'll receive email notifications for applications</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'preview' && (
          <div className="space-y-6">
            {/* Auto-Generated Advertisement */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200">
              <div className="px-6 py-4 border-b border-gray-200">
                <h2 className="text-lg font-semibold text-gray-900">Auto-Generated Job Advertisement</h2>
                <p className="text-sm text-gray-600 mt-1">
                  This is the advertisement that will be created based on your requirements. It will be posted after approval.
                </p>
              </div>
              
              <div className="p-6">
                <div className="bg-gray-50 rounded-lg p-6">
                  <pre className="whitespace-pre-wrap text-sm text-gray-800 font-sans">
                    {autoGeneratedAd}
                  </pre>
                </div>
                
                <div className="mt-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <div className="flex items-start">
                    <Clock className="w-5 h-5 text-yellow-500 mr-3 mt-0.5" />
                    <div>
                      <h3 className="text-sm font-medium text-yellow-800">Approval Process</h3>
                      <p className="text-sm text-yellow-700 mt-1">
                        Your job requirement will be reviewed by our team within 24-48 hours. You'll receive an email notification once it's approved and published.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Job Requirement Summary */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200">
              <div className="px-6 py-4 border-b border-gray-200">
                <h2 className="text-lg font-semibold text-gray-900">Job Requirement Summary</h2>
              </div>
              
              <div className="p-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h3 className="text-sm font-medium text-gray-700 mb-2">Position</h3>
                    <p className="text-gray-900">{jobRequirement.position}</p>
                  </div>
                  <div>
                    <h3 className="text-sm font-medium text-gray-700 mb-2">Location</h3>
                    <p className="text-gray-900">{jobRequirement.location}</p>
                  </div>
                  <div>
                    <h3 className="text-sm font-medium text-gray-700 mb-2">Salary Range</h3>
                    <p className="text-gray-900">
                      {jobRequirement.salaryRange?.currency} {jobRequirement.salaryRange?.min.toLocaleString()} - {jobRequirement.salaryRange?.max.toLocaleString()}
                    </p>
                  </div>
                  <div>
                    <h3 className="text-sm font-medium text-gray-700 mb-2">Visible to Candidates</h3>
                    <p className="text-gray-900">
                      {jobRequirement.viewToCandidates ? 'Yes' : 'No'}
                    </p>
                  </div>
                  <div>
                    <h3 className="text-sm font-medium text-gray-700 mb-2">Test Paper</h3>
                    <p className="text-gray-900">
                      {jobRequirement.testPaper ? (
                        <span>
                          {jobRequirement.testPaper.fileName}
                          {jobRequirement.testPaper.hasAnswerSheet && ' (with answer sheet)'}
                        </span>
                      ) : 'None uploaded'}
                    </p>
                  </div>
                  <div className="md:col-span-2">
                    <h3 className="text-sm font-medium text-gray-700 mb-2">Job Description</h3>
                    <p className="text-gray-900">{jobRequirement.jobDescription}</p>
                  </div>
                  <div className="md:col-span-2">
                    <h3 className="text-sm font-medium text-gray-700 mb-2">Requirements</h3>
                    <p className="text-gray-900">{jobRequirement.jobRequirements}</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'submitted' && (
          <div className="bg-white rounded-lg shadow-sm border border-gray-200">
            <div className="p-8 text-center">
              <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
              <h2 className="text-2xl font-bold text-gray-900 mb-4">Job Requirement Submitted!</h2>
              <p className="text-gray-600 mb-6">
                Your job requirement has been successfully submitted for admin review. Our team will review it and create an optimized job advertisement.
              </p>
              
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-6">
                <div className="flex items-start">
                  <Clock className="w-5 h-5 text-blue-500 mr-3 mt-0.5" />
                  <div>
                    <h3 className="text-sm font-medium text-blue-800 mb-2">What happens next?</h3>
                    <ul className="text-sm text-blue-700 space-y-1">
                      <li>• Our team will review your job requirement within 24-48 hours</li>
                      <li>• We'll create an optimized advertisement for maximum visibility</li>
                      <li>• Client name will be hidden when published to candidates</li>
                      <li>• You'll receive email notifications for applications</li>
                      <li>• You can track the status in your dashboard</li>
                    </ul>
                  </div>
                </div>
              </div>
              
              <div className="flex justify-center gap-4">
                <Link
                  to="/employer/dashboard"
                  className="inline-flex items-center px-4 py-2 border border-transparent rounded-md text-sm font-medium text-white bg-[#114373] hover:bg-[#0d3559] focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  Back to Dashboard
                </Link>
                <button
                  onClick={() => setActiveTab('form')}
                  className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <Plus className="w-4 h-4 mr-2" />
                  Submit Another Job
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default CreateJob; 